/* Tests cetegorical mutual exclusion with different numbers of threads.
 * Automatic checks only catch severe problems like crashes.
 */
#include <stdio.h>
#include "tests/threads/tests.h"
#include "threads/malloc.h"
#include "threads/synch.h"
#include "threads/thread.h"
#include "lib/random.h" //generate random numbers

#define BUS_CAPACITY 3
#define SENDER 0
#define RECEIVER 1
#define NORMAL 0
#define HIGH 1

/*
 *	initialize task with direction and priority
 *	call o
 * */
typedef struct {
	int direction;
	int priority;
} task_t;

static struct lock bus_lock;
int currentdirection;
int waiters_norm[2];
int waiters_prio[2];
int jobs = 0;
struct condition waitingToGoNorm[2];
struct condition waitingToGoPrio[2];

void batchScheduler(unsigned int num_tasks_send, unsigned int num_task_receive,
        unsigned int num_priority_send, unsigned int num_priority_receive);

void senderTask(void *);
void receiverTask(void *);
void senderPriorityTask(void *);
void receiverPriorityTask(void *);


void oneTask(task_t task);/*Task requires to use the bus and executes methods below*/
	void getSlot(task_t task); /* task tries to use slot on the bus */
	void transferData(task_t task); /* task processes data on the bus either sending or receiving based on the direction*/
	void leaveSlot(task_t task); /* task release the slot */



/* initializes semaphores */ 
void init_bus(void){ 
 
    random_init((unsigned int)123456789); 
    waiters_norm[0]=0;
    waiters_norm[1]=0;
    waiters_prio[0]=0;
    waiters_prio[1]=0;

    //msg("NOT IMPLEMENTED");
    /* FIXME implement */
    lock_init (&bus_lock);
    cond_init(&waitingToGoNorm[0]);
    cond_init(&waitingToGoNorm[1]);
    cond_init(&waitingToGoPrio[0]);
    cond_init(&waitingToGoPrio[1]);


}

/*
 *  Creates a memory bus sub-system  with num_tasks_send + num_priority_send
 *  sending data to the accelerator and num_task_receive + num_priority_receive tasks
 *  reading data/results from the accelerator.
 *
 *  Every task is represented by its own thread. 
 *  Task requires and gets slot on bus system (1)
 *  process data and the bus (2)
 *  Leave the bus (3).
 */

void batchScheduler(unsigned int num_tasks_send, unsigned int num_task_receive,
        unsigned int num_priority_send, unsigned int num_priority_receive)
{
	task_t *task;
	int i=0;
	for(i=0;i<num_tasks_send;i++){
		//char str[num_tasks_send];
		//sprintf(str, "%d", i);
		task->direction=0;
		task->priority=0; 
		thread_create("tt",1,oneTask,task);			
	}   
	for(i=0;i<num_tasks_receive;i++){
		//char str[num_tasks_receive];
		//sprintf(str, "%d", i);
		task->direction=1;
		task->priority=0; 
		thread_create("tt",1,oneTask,task);				
	}   
	for(i=0;i<num_priority_send;i++){
		//char str[num_priority_send];
		//sprintf(str, "%d", i);
		task->direction=0;
		task->priority=1; 
		thread_create("tt",1,oneTask,task);				
	}  
	for(i=0;i<num_priority_receive;i++){
		//char str[num_priority_receive];
		//sprintf(str, "%d", i);
		task->direction=1;
		task->priority=1; 
		thread_create("tt",1,oneTask,task);				
	}  

	
    //msg("NOT IMPLEMENTED");
    /* FIXME implement */
}

/* Normal task,  sending data to the accelerator */
void senderTask(void *aux UNUSED){
        task_t task = {SENDER, NORMAL};
        oneTask(task);
}

/* High priority task, sending data to the accelerator */
void senderPriorityTask(void *aux UNUSED){
        task_t task = {SENDER, HIGH};
        oneTask(task);
}

/* Normal task, reading data from the accelerator */
void receiverTask(void *aux UNUSED){
        task_t task = {RECEIVER, NORMAL};
        oneTask(task);
}

/* High priority task, reading data from the accelerator */
void receiverPriorityTask(void *aux UNUSED){
        task_t task = {RECEIVER, HIGH};
        oneTask(task);
}

/* abstract task execution*/
void oneTask(task_t task) {
  getSlot(task);
  transferData(task);
  leaveSlot(task);
}


/* task tries to get slot on the bus subsystem */
void getSlot(task_t task) 
{
    //msg("NOT IMPLEMENTED");
    lock_acquire (&bus_lock);
    while((jobs == 3) || (jobs>0 && currentdirection != task.direction))
    {
	if(task.priority=1){
		waiters_prio[task.direction]++;
		cond_wait(&waitingToGoPrio[task.direction],&bus_lock);
		waiters_prio[task.direction]--;
	} else 
	{
    		waiters_norm[task.direction]++;
		cond_wait(&waitingToGoNorm[task.direction],&bus_lock);
		waiters_norm[task.direction]--;
	}
	
			
    }    
	
    jobs++;
    currentdirection = task.direction;

    lock_release (&bus_lock);
    /* FIXME implement
      task->direction
      check direction(cond variable?)
      wait on semaphore

   */
}

/* task processes data on the bus send/receive */
void transferData(task_t task) 
{
    printf("prio: %s, direction: %s\n", task.priority, task.direction);
    timer_sleep(1000);
    printf("%s\n", "Data transferred!");
    //msg("NOT IMPLEMENTED");
    /* FIXME implement */
}

/* task releases the slot */
void leaveSlot(task_t task) 
{
    //msg("NOT IMPLEMENTED");
    /* FIXME implement */
    lock_acquire (&bus_lock);

    jobs--;
    
    if (waiters_prio[currentdirection] > 0){
	//skicka prio samma sida
	cond_signal(&waitingToGoPrio[currentdirection],&bus_lock);
	}
    else if(waiters_prio[1-currentdirection]>0 && jobs == 0){
	//skicka prio andra sidan 
	cond_signal(&waitingToGoPrio[1-currentdirection],&bus_lock);
	}
    else if(waiters_prio[1-currentdirection]==0 && waiters_norm[currentdirection]>0){
        //skicka en normal samma sida 
	cond_signal(&waitingToGoNorm[currentdirection],&bus_lock);
	}
    else if (jobs == 0){
        // skicka en normal andra sidan 
	cond_broadcast(&waitingToGoNorm[1-currentdirection],&bus_lock);
	}

    lock_release(&bus_lock);
}








